-
  Purchase user can create an invoice for order on receptions therfore test with that user which have Purchase user rights.
-
  !context
    uid: 'res_users_purchase_user'
-
 I confirm another order where invoice control is 'Bases on incoming shipments'.
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_2}
-
  I check that the invoice of order.
-
  !python {model: purchase.order}: |
    purchase_order = self.browse(cr, uid, ref("purchase_order_2"))
    assert len(purchase_order.invoice_ids) == 0, "Invoice should not be generated on order confirmation."
-
+ I receive the incoming shipment.
-
 !python {model: stock.partial.picking}: |
    stock_picking_obj = self.pool.get('stock.picking')
    pick_id = stock_picking_obj.search(cr, uid, [('purchase_id','=',ref('purchase_order_2'))])
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': pick_id})
    self.do_partial(cr, uid, [partial_id])
-
 I check the state of incoming shipment.
-
 !python {model: stock.picking}: |
    pick_id = self.search(cr, uid, [('purchase_id','=',ref('purchase_order_2'))])[0]
    assert self.browse(cr, uid, pick_id).state == 'done', "Incoming Shipment should be in done state"
-
  Now I create an invoice for order on reception.
-
  !python {model: purchase.order}: |
    pick_ids = [self.browse(cr, uid, ref("purchase_order_2")).id]
    self.action_invoice_create(cr, uid, pick_ids)
-
 I check that the invoice of order.
-
 !python {model: purchase.order}: |
    purchase_order = self.browse(cr, uid, ref("purchase_order_2"))
    assert len(purchase_order.invoice_ids) == 1, "Invoice should be generated."

-
  Purchase manager can pay an invoice therefore test with that user which have Purchase manager rights.
-
  !context
    uid: 'res_users_purchase_manager'
-
 I validate and pay the invoice and check the status.
-
 !python {model: purchase.order}: |
    for invoice in self.browse(cr, uid, ref("purchase_order_2")).invoice_ids:
        account_invoice_obj = self.pool.get('account.invoice')
        account_invoice_obj.signal_invoice_open(cr, uid, [invoice.id])
        pay = account_invoice_obj.pay_and_reconcile(cr, uid, [invoice.id],
        3095.00, ref('account.cash'), ref('account.period_10'),
        ref('account.bank_journal'), ref('account.cash'),
        ref('account.period_10'), ref('account.bank_journal'),
        name='Payment for test customer invoice')
        assert invoice.state == 'paid', "Invoice should be in paid state" 
-
 I check that purchase order is invoiced, paid and it's state is in done.
-
 !python {model: purchase.order}: |
    assert self.browse(cr, uid, ref("purchase_order_2")).invoiced == True,"Purchase Order should be invoiced"
    assert self.browse(cr, uid, ref("purchase_order_2")).paid == True,"Purchase Order should be paid"
    assert self.browse(cr, uid, ref("purchase_order_2")).state == 'done', "Purchase order should be in done state"
